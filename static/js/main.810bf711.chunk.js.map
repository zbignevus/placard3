{"version":3,"sources":["Components/Search/Search.js","Components/SearchTag/SearchTag.js","Components/ResultImage/ResultImage.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faCoffee","faTimesCircle","faSearch","faDownload","faSearchPlus","Search","_ref","handleKeyPress","react_default","a","createElement","type","onKeyDown","placeholder","SearchTag","tag","onDismiss","onClick","className","react_fontawesome_index_es","icon","ResultImage","avatarImage","avatarAlt","author","image","imageAlt","link","url","download","react","href","target","rel","src","alt","PATH_BASE","PATH_SEARCH","PARAM_SEARCH","PARAM_CLIENT_ID","CLIENT_ID","PARAM_PER_PAGE","PER_PAGE","columnLength","concat","Math","floor","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSetQuery","e","tags","state","slice","includes","value","push","keyCode","setState","searchKey","results","fetchQuery","isLoading","axios","then","result","setResult","data","catch","error","map","id","urls","regular","user","profile_image","small","username","name","links","html","raw","console","log","handleDismiss","filteredTags","filter","tagItem","handleTagClick","_this2","Components_Search_Search","Components_SearchTag_SearchTag","key","App_ResultColumns","Component","ResultColumns","resultGrid","i","j","imageResultColumn","imageResult","Components_ResultImage_ResultImage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.810bf711.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Search.css';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCoffee, faTimesCircle, faSearch, faDownload, faSearchPlus } from '@fortawesome/free-solid-svg-icons';\r\nlibrary.add(faCoffee, faTimesCircle, faSearch, faDownload, faSearchPlus);\r\n\r\nconst Search = ({handleKeyPress}) =>\r\n  <input type=\"text\" onKeyDown={handleKeyPress} placeholder=\"Search for an image using a keyword...\"/>\r\n\r\n\r\nexport default Search;\r\n","import React, {Component} from 'react';\r\nimport './SearchTag.css';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\nlibrary.add(faTimesCircle);\r\n\r\nconst SearchTag = ({tag, onDismiss, onClick}) =>\r\n  <div className=\"searchTag\"><span onClick={onClick}>{tag}</span>\r\n    <button className=\"tagDismiss\" onClick={onDismiss}>\r\n      <FontAwesomeIcon icon=\"times-circle\"/>\r\n    </button>\r\n  </div>\r\n\r\n\r\n  export default SearchTag;\r\n","import React, {Component, Fragment} from 'react';\r\nimport './ResultImage.css';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDownload, faSearchPlus } from '@fortawesome/free-solid-svg-icons';\r\nlibrary.add(faDownload, faSearchPlus);\r\n\r\nconst ResultImage = ({avatarImage, avatarAlt, author, image, imageAlt, link, download, url}) =>\r\n  <Fragment>\r\n    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\" download><FontAwesomeIcon className=\"download-icon\" icon=\"download\"/></a>\r\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\"><img src={avatarImage} alt={avatarAlt} className=\"result-author-avatar\" /></a>\r\n    <div className=\"result-author-image\"><a href={link} target=\"_blank\" rel=\"noopener noreferrer\">{author}</a></div>\r\n    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"result-view\" src={image} alt={imageAlt}/></a>\r\n  </Fragment>\r\n\r\nexport default ResultImage;\r\n","import React, {Component, Fragment} from 'react';\r\n\r\nimport Search from './Components/Search/Search.js';\r\nimport SearchTag from './Components/SearchTag/SearchTag.js';\r\nimport ResultImage from './Components/ResultImage/ResultImage.js';\r\n\r\nimport axios from 'axios';\r\n\r\n \r\n\r\nconst DEFAULT_QUERY = \"cars\";\r\nconst PATH_BASE = 'https://api.unsplash.com';\r\nconst PATH_SEARCH = '/search/photos';\r\nconst PARAM_SEARCH = 'query=';\r\nconst PARAM_CLIENT_ID = \"client_id=\";\r\nconst CLIENT_ID= \"ca6fee0f88df528c206afa9b4d1dacdbc29febc2684aee9ece11f69dacaa7459\";\r\nconst PARAM_PER_PAGE = \"&per_page=\";\r\nconst PER_PAGE = 30;\r\nconst req = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${\"\"}&${PARAM_CLIENT_ID}${CLIENT_ID}`;\r\n\r\nconst columnLength = Math.floor(PER_PAGE / 3);\r\n\r\nclass App extends Component{\r\nconstructor(props){\r\n  super(props);\r\n\r\n  this.state = {\r\n    columnLength: 5,\r\n    tags: [],\r\n    searchKey: null,\r\n    error: null,\r\n    results: [],\r\n    isLoading: false,\r\n  }\r\n}\r\n\r\nonSetQuery = (e) => {\r\n  const tags = this.state.tags.slice();\r\n\r\n (tags.includes(e.target.value) ? tags : tags.push(e.target.value))\r\n  &&\r\n    e.keyCode === 13\r\n  &&\r\n    this.setState({\r\n      searchKey: e.target.value,\r\n      tags,\r\n      results:[],\r\n    })\r\n\r\n  e.keyCode === 13 && this.fetchQuery(e.target.value)\r\n\r\n}\r\n\r\nfetchQuery = (searchKey) => {\r\n  this.setState({\r\n    isLoading: true,\r\n  })\r\n  axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchKey}&${PARAM_PER_PAGE}${PER_PAGE}&${PARAM_CLIENT_ID}${CLIENT_ID}`)\r\n    .then(result => this.setResult(result.data))\r\n    .catch(error => this.setState({ error }));\r\n\r\n}\r\n\r\n\r\nsetResult = (data) => {\r\n  const results = this.state.results.slice();\r\n  data.results.map(result => {\r\n    results.push(\r\n      {\r\n        id: result.id,\r\n        image: result.urls.regular,\r\n        avatarImage: result.user.profile_image.small,\r\n        avatarAlt: result.user.username,\r\n        author: result.user.name,\r\n        link: result.user.links.html,\r\n        download: result.links.download,\r\n        url: result.urls.raw,\r\n      }\r\n    )\r\n  })\r\n\r\n  this.setState({\r\n    results,\r\n    isLoading: false,\r\n  })\r\n  console.log(results);\r\n}\r\n\r\nhandleDismiss = (tag) => {\r\n  const filteredTags = this.state.tags.filter(tagItem => tagItem !== tag);\r\n\r\n  this.setState({\r\n    tags: filteredTags,\r\n  })\r\n\r\n}\r\n\r\nhandleTagClick = (tag) => {\r\n\r\n  this.setState({\r\n    searchKey: tag,\r\n    results:[],\r\n  })\r\n\r\n  this.fetchQuery(tag);\r\n\r\n}\r\n\r\ncomponentDidMount(){\r\n\r\n  this.fetchQuery(\"random\");\r\n\r\n}\r\n\r\n\r\n\r\n  render(){\r\n    return(\r\n\r\n      <div className=\"app-container\">\r\n\r\n          <div className=\"top-container\">\r\n            <div className=\"searchField-container\">\r\n              <div className=\"logo\"><h1>Placard</h1><small>image search</small></div>\r\n              <Search handleKeyPress={this.onSetQuery}/>\r\n            </div>\r\n\r\n            <div className=\"searchTags-container\">\r\n\r\n              { this.state.tags.map( tag => <SearchTag tag={tag} key={tag} onClick={() =>this.handleTagClick(tag)} onDismiss={() =>this.handleDismiss(tag)}/> ) }\r\n\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"content-container\">\r\n                <div className=\"content-container-row\">\r\n                  {this.state.isLoading\r\n                  ? <h2>Retrieving results...</h2>\r\n                  :\r\n                    (this.state.results[0] != null\r\n                    ? <ResultColumns results={this.state.results} columnLength={columnLength}/>\r\n                    : <h2>No results found.</h2>\r\n                    )\r\n\r\n                  }\r\n                </div>\r\n          </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst ResultColumns = ({results, columnLength}) => {\r\n  const resultGrid = [];\r\n\r\n  for(let i=0, j=0; i<3; i++){\r\n      let imageResultColumn = results.slice(j, j+=columnLength);\r\n      console.log(imageResultColumn);\r\n      resultGrid.push(\r\n        <div className=\"content-container-column\">\r\n                {imageResultColumn.map(imageResult =>\r\n                      <div className=\"content-result-container\" key={imageResult.id}>\r\n\r\n                        <ResultImage\r\n                          image={imageResult.image}\r\n                          avatarImage={imageResult.avatarImage}\r\n                          avatarAlt={imageResult.avatarAlt}\r\n                          author={imageResult.author}\r\n                          link={imageResult.link}\r\n                          download={imageResult.download}\r\n                          url={imageResult.url}\r\n                          />\r\n\r\n                      </div>\r\n                    )\r\n                }\r\n        </div>\r\n    )\r\n  }\r\n  return resultGrid;\r\n\r\n  }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n \r\n"],"sourceRoot":""}